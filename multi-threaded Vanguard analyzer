import pandas as pd, json, os, yfinance as yf, matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor
from datetime import date

CFG,CSV="allocation_config.json","vanguard_portfolio.csv"
CACHE_FILE="price_cache.json"
TODAY=str(date.today())

# ===== LOAD TARGET ALLOCATION =====
if not os.path.exists(CFG):
    json.dump({"US Stock":0.6,"International Stock":0.2,"Bonds":0.15,"Cash":0.05},open(CFG,"w"),indent=2)
    print(f"Created {CFG}, edit targets.");exit()
target=json.load(open(CFG))

# ===== LOAD PORTFOLIO =====
df=pd.read_csv(CSV)
if "Symbol"not in df or"Quantity"not in df:raise ValueError("CSV must have Symbol,Quantity")

# ===== CLASSIFY =====
def cat(n):
    n=n.lower()
    if any(k in n for k in["treasury","bond","fixed income"]):return"Bonds"
    if any(k in n for k in["cash","money market"]):return"Cash"
    if any(k in n for k in["international","intl","europe","asia","emerging"]):return"International Stock"
    return"US Stock"
df["Category"]=df["Description"].apply(cat)

# ===== LOAD CACHE =====
cache=json.load(open(CACHE_FILE)) if os.path.exists(CACHE_FILE) else {}
if TODAY not in cache: cache[TODAY]={}

# ===== PRICE FETCH =====
def fetch_price(row):
    sym=row["Symbol"]
    if pd.isna(sym)or row["Category"]=="Cash":
        return row.get("Market Value",0)/max(row.get("Quantity",1),1)
    if sym in cache[TODAY]:
        return cache[TODAY][sym]
    try:
        price=yf.Ticker(sym).fast_info["last_price"]
        cache[TODAY][sym]=price
        return price
    except:
        return row.get("Market Value",0)/max(row.get("Quantity",1),1)

print("Fetching prices (cached)...")
with ThreadPoolExecutor(max_workers=8) as ex:
    df["Price"]=list(ex.map(fetch_price,[row for _,row in df.iterrows()]))

# ===== SAVE CACHE =====
json.dump(cache,open(CACHE_FILE,"w"),indent=2)

# ===== CALCULATE ALLOCATIONS =====
df["Market Value"]=df["Price"]*df["Quantity"]
tot=df["Market Value"].sum()
alloc=df.groupby("Category")["Market Value"].sum()/tot

# ===== OUTPUT =====
print("\nAllocation:");[print(f"{c}: {p:.2%} (Target {target.get(c,0):.2%})")for c,p in alloc.items()]
print("\nRecommendations:")
for c,t in target.items():
    d=t-alloc.get(c,0)
    if d>0.01:print(f"Increase {c} by {d:.2%} (~${d*tot:,.0f})")
    elif d<-0.01:print(f"Reduce {c} by {-d:.2%} (~${-d*tot:,.0f})")
    else:print(f"{c} on target")

# ===== PLOT =====
fig,ax=plt.subplots(1,2,figsize=(8,4))
ax[0].pie(alloc,labels=alloc.index,autopct='%1.1f%%');ax[0].set_title("Current")
ax[1].pie(target.values(),labels=target.keys(),autopct='%1.1f%%');ax[1].set_title("Target")
plt.tight_layout();plt.show()
